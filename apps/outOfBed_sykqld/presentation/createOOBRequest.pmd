{
  "id": "createOOBRequest",
  "_generationNote": "This page creates a single instance of the OOBRequest object. You can use this page as a starting template for building an end-user page, or used as an administration page to create new instances.",
  "endPoints": [
    {
      "name": "getCurrentWorker",
      "baseUrlType": "WORKDAY-COMMON",
      "url": "/workers/me",
      "authType": "sso"
    },
    {
      "name": "getMobileNumbers1",
      "httpMethod": "GET",
      "authType": "sso",
      "_generationNote": "Gets a collection of MobileNumbers business objects. By default, this endpoint returns 20 instances. To increase the page size, use the 'limit' query parameter (e.g. ?limit=100).",
      "_generationNote2": "If there are more than 100 instances, consider using a search endpoint or another way for the user to filter the available selections.",
      "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers` %>"
    },
    {
      "name": "getMobileNumbers",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT workdayID AS id, name, number, countryCode, notes FROM outOfBed_sykqld_mobileNumbers WHERE name is not null AND number is not null ORDER BY createdMoment ASC').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getFrequentTravellers",
      "baseUrlType": "APP-V1",
      "url": "/frequentTravellers",
      "authType": "sso"
    },
    {
      "name": "getOOBProfile",
      "baseUrlType": "APP-V1",
      "url": "/oobProfiles",
      "authType": "sso"
    },
    {
      "name": "getFrequentTravellersWQL",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<%'/data?query=' + ('SELECT workdayID AS id, name FROM outOfBed_sykqld_frequentTravellers WHERE Name is not null').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerDetails",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + OOB.getWorkerDetails('phoneNumbers, workerIsContingentWorker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse}, cf_CFLRVUnitIDTextWorker AS unitId, jobFamilyGroup', empty(onBehalf) ?  'worker in (' + getCurrentWorker.id +')' : '') %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerFromSameUnit",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT worker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse} as dependent FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + getWorkerDetails.data[0].unitId + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getWorkerFromSameUnit",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT worker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse} as dependent FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + getWorkerDetails.data[0].unitId + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getWorkerFromSameUnit1",
      "baseUrlType": "WORKDAY-WQL",
      "exclude": true,
      "url": "<% '/data?query=' + ('SELECT worker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship, cf_XTNDOOBTFIsSpouse AS isSpouse} as dependent FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE worker in (' + getCurrentWorker.id + ')').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getWorkerAndDependents",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT worker, cf_CFLRVUnitIDTextWorker as UnitID, fullName, phone_PrimaryHome, phone_PrimaryWork, phoneNumbers, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship} as dependents FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + 12345 + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getPhoneCodes",
      "httpMethod": "GET",
      "authType": "sso",
      "deferred": true,
      "url": "<% 'https://api.workday.com/referenceData/country_phone_code/vers/latest/search?q=' + instanceListQuery %>"
    },
    {
      "name": "getTimeOffTypes",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT timeOffType FROM timeOffTypes').urlEncode() %>",
      "authType": "wcpisu"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "createAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "exclude": "<% !empty(nextBtn.value) %>",
        "onSend": "<%
        self.data = {'data':[]};
        var addAccompanyingTraveller= [];

        for (var otherMembers : OtherMemberGrid.getRows()) {
          if(otherMembers.childrenMap.addToOOBCol.value){
            addAccompanyingTraveller.add({'firstName': otherMembers.childrenMap.familyMemberCol.value.substringBefore(' '),'lastName': otherMembers.childrenMap.familyMemberCol.value.substringAfter(' ')});
          }
        }

        if(!empty(staffMemeberGrid.getSelectedRows())){
            for ( var selectedMembers : staffMemeberGrid.getSelectedRows()) {
                addAccompanyingTraveller.add( {'firstName': selectedMembers.childrenMap.familyMemberCol.childrenMap.staffMemberName.value.substringBefore(' '), 'lastName': selectedMembers.childrenMap.familyMemberCol.childrenMap.staffMemberName.value.substringAfter(' ')});
            }
        }
        if(!empty(fieldMemeberGrid.getSelectedRows())){
          for ( var i : fieldMemeberGrid.getSelectedRows()) {
            addAccompanyingTraveller.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringBefore(' '), 'lastName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringAfter(' ')});
          }
        }

        self.data.data.add(addAccompanyingTraveller);
        self.data;
        %>",
        "failOnStatusCodes": [{"code":400},{"code":403}]
      },
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "createFrequentTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/frequentTravellers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
          self.data = {'data':[]};

          for (var otherMembers : OtherMemberGrid.getRows()) {
            if(otherMembers.childrenMap.addToOOBCol.value){
            self.data.data.add({'name': otherMembers.childrenMap.familyMemberCol.value, 'oobProfile': {'id' : getOOBProfile.data[0].id}});
            }
          }

          self.data;
          %>",
        "failOnStatusCodes": [{"code":400},{"code":403}]
      },
      {
        "name": "createMobileNumbers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "failOnStatusCodes": [{"code":400},{"code":403}],
        "onSend": "<%
          self.data = {'data':[]};
          for (var otherNumbers : allNumbers.getRows()) {
            if(otherNumbers.childrenMap.NameCol.childrenMap.numberId.value && otherNumbers.childrenMap.NameCol.childrenMap.numberId.value == 'other'){
                console.info('phone number added ');
              self.data.data.add({
                'name': !empty(otherNumbers.childrenMap.phoneNameCol.value) ? otherNumbers.childrenMap.phoneNameCol.value : '',
                'number': !empty(otherNumbers.childrenMap.phoneNumberCol.value) ? otherNumbers.childrenMap.phoneNumberCol.value : '' ,
                'notes': !empty(otherNumbers.childrenMap.notesCol.value) ? otherNumbers.childrenMap.notesCol.value : '',
                'countryCode': !empty(otherNumbers.childrenMap.countryCodeCol.value) ? otherNumbers.childrenMap.countryCodeCol.selectedEntries[0].id : '',
                'oobProfile': !empty(getOOBProfile.data[0].id) ? {'id' : getOOBProfile.data[0].id} : ''
              });
            }
          }

        self.data;
        %>"
      },
      {
        "name": "createStatus",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/status` %>",
        "authType": "wcpisu",
        "httpMethod": "POST",
        "failOnStatusCodes": [{"code":400},{"code":403}],
        "values": [
          {
            "outboundPath": "statusID",
            "value": "<% 'Status ID 1' %>"
          },
          {
            "outboundPath": "description",
            "value": "<% 'In Progress' %>"
          }
        ]
      },
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBRequest business object resource.",
        "name": "createOOBRequest",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/oobRequests` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
          console.debug('createOOBRequest self.data = ' + json:asJSON(self.data));
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "initiator.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "expectedEndDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "exclude": "<% !empty(nextBtn.value) %>",
            "value": "<% createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}}) %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "exclude":"<% empty(createMobileNumbers.data) && empty(allNumbers.getRows()) %>",
            "value": "<%
            var mobileList = !empty(createMobileNumbers.data) ? createMobileNumbers.data.map(x=> {{'id' : x.body.id}}) : [];

            if (!empty(allNumbers.getRows())){
              for (var allOtherMembers : allNumbers.getRows()) {
                if(allOtherMembers.childrenMap.NameCol.childrenMap.numberId.value && allOtherMembers.childrenMap.NameCol.childrenMap.numberId.value != 'other'){
                  mobileList.add({'id' : allOtherMembers.childrenMap.NameCol.childrenMap.numberId.value});
                }
              }
            }

            return mobileList;
            %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% elevatedRiskRG.value == ['yes'] ? true : false %>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller.id",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "<% 'true' %>"
          },
          {
            "outboundPath": "status.id",
            "value": "<% createStatus.id %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          }
        ]
      },
      {
        "name": "createPersonalTimeOff",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/personalTimeOffs?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "failOnStatusCodes": [{"code":400},{"code":403}],
        "onSend": "<%
         self.data = {'data':[]};

         for (var personalTimeOff : personalTimeGrid.getRows()) {
           if(personalTimeOff.childrenMap.workerTimeOffCol.selectedEntries[0].id){
             self.data.data.add({
               'worker': !empty(personalTimeOff.childrenMap.workerTimeOffCol.selectedEntries[0].id) ? {'id' : personalTimeOff.childrenMap.workerTimeOffCol.selectedEntries[0].id} : '',
               'oobRequest': !empty(createOOBRequest.id) ? {'id' : createOOBRequest.id} : '' ,
               'type': !empty(personalTimeOff.childrenMap.absenceTypeCol.selectedEntries[0]) ? personalTimeOff.childrenMap.absenceTypeCol.selectedEntries[0].descriptor : '',
               'startDate': !empty(personalTimeOff.childrenMap.startDateCol.value) ? personalTimeOff.childrenMap.startDateCol.value.format('yyyy-MM-dd') : '',
               'endDate': !empty(personalTimeOff.childrenMap.endDateCol.value) ? personalTimeOff.childrenMap.endDateCol.value.format('yyyy-MM-dd') : ''
             });  
           }
         }
          console.info('create Personal time self.data' + json:asJSON(self.data));
         self.data;
         %>"
      },
      {
        "_generationNote": "Updates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "updateOOBProfile",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/oobProfiles/' + getOOBProfile.data[0].id %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "exclude": false,
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "sts",
            "exclude": true,
            "value": "<% !empty(sts.value) ? sts.value : '' %>"
          },
          {
            "outboundPath": "frequentTravellers",
            "value": "<% createFrequentTravellers.data.map(x=> {{'id' : x.body.id}}) %>"
          }
        ]
      },
      {
        "_generationNote": "Updates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "updateAccompanyTravellers",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true' %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "exclude": "<% !empty(nextBtn.value) %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "onSend":"<%
          self.data = {'data':[]};
          var listOfAccompanyTravellers = createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}});
          for(var x : listOfAccompanyTravellers){
              self.data.data.add({'id' : x.id, 'oobRequest' : {'id' : createOOBRequest.id}});
          }
          console.info('Update accompany travllers Fired self.data = ' + json:asJSON(self.data));
        self.data;
        %>"
      },
      {
        "name": "transitionOutboundVars",
        "type": "outboundVariable",
        "variableScope": "flow",
        "values": [
          {
            "outboundPath": "saveForLater",
            "value": "<% !empty(saveForLaterBtn.value) %>"
          },
          {
            "outboundPath": "proceed",
            "value": "<% !empty(nextBtn.value) %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? endDateDt.value : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellerNames",
            "value": "<% getAllAccompanyingTravellers().data.map(x=> {{'name' : (x.firstName + ' ' + x.lastName)}}) %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "value": "<% ! empty(createAccompanyingTravellers.data) ? createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}}) : [];    %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "value": "<% createMobileNumbers.data.map(x=> {{'id' : x.body.id}}) %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% (elevatedRiskRG.value == ['yes'])%>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller",
            "value": "<% 'singleInstance' %>"
          },
          {
            "outboundPath": "lodging.id",
            "value": "''"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "''"
          },
          {
            "outboundPath": "status",
            "value": "''"
          },
          {
            "outboundPath": "initiator",
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          },
          {
            "outboundPath": "oobRequest",
            "value": "<% !empty(createOOBRequest.id) ?  createOOBRequest.id : '' %>"
          }
        ]
      }
    ],
    "responseErrorDetail": {
      "_generationNote": "This responseErrorDetail works with the Workday API error structure.",
      "_generationNote2": "If there is only a single error, the errorSummary will be shown.",
      "errorSummary": "<% error %>",
      "_generationNote3": "For multiple errors, append the top-level error to provide context.",
      "errors": "<% empty errors ? [] : [error].join(errors.map(err => { err.error } )) %>"
    }
  },
  "include": [
    "OOB.script",
    "Dates.script"
  ],
  "onLoad": "<%
    var familyAndFrequent =[];
    var personalTimeOffMembers =[];
    var counter = 0;
    for (var item : getWorkerFromSameUnit.data){
      familyAndFrequent.add({'id': item.worker.id, 'name': item.worker.descriptor});
      if(!empty(item)){
        var i = 0;
        for( var child : item.dependent){
            if(child.isSpouse != true){
          familyAndFrequent.add({'id': child.name, 'name': child.name, 'relationship': child.relationship.descriptor});
          }
          i = i+1;
        }
        i=0;
      }
    }
    
    for (var item : getWorkerDetails.data){
        personalTimeOffMembers.add({'id': item.worker.id, 'name': item.worker.descriptor});
      if(!empty(item)){
        var q = 0;
          for( var child : item){
            if(!empty(child.dependent.relationship) && child.dependent.isSpouse == true ){
             personalTimeOffMembers.add({'id': child.name, 'name': child.name, 'relationship': child.relationship.descriptor});
              q = q+1;
            }
        }
        i=0;
      }
    };

    pageVariables.frequentTravellers = familyAndFrequent.addAll(getFrequentTravellersWQL.data);
    pageVariables.phoneNumbers = getPhoneNumbers().add({'id': 'other', 'number': 'Other', 'name': 'Other'}) ;
    pageVariables.isField = !empty(getWorkerDetails.data[0].jobFamilyGroup.find(x => {x.descriptor == 'Field'}));
  %>",
  "onSubmit": "<%

  %>",
  "securityDomains": [ ],
  "script": "<%

  var getPhoneNumbers = function(){
      var phoneNumbersPV = !empty(getMobileNumbers.data) ? getMobileNumbers.data : [] ;
      if(!empty(getMobileNumbers.data)){
        for (var numberVar : getWorkerDetails.data[0].phoneNumbers){
          phoneNumbersPV.add({'id' : numberVar.id, 'number': numberVar.descriptor,  'name': numberVar.descriptor});
        }
      }
      return phoneNumbersPV;
  }

   var childrenArrangments = function(){
     var counter = fieldMemeberGrid.getRows().filter(x => { (x.childrenMap.familyMemberCol.childrenMap.relationship.value ?: '') == 'Child' });

     for(var children : counter){
       console.info('childern = ' + json:asJSON(children));
       if(!children.isSelected()){
         alternativeTxtA.setVisible(true);
         alternativeTxtA.setRequired(true);
         AlternativeRTxt.setVisible(true);
       }else{
         alternativeTxtA.setVisible(false);
         alternativeTxtA.setRequired(false);
         AlternativeRTxt.setVisible(false);
       }
     }
   }
             
  var getAllAccompanyingTravellers = function(){
  var addAccompanyingTraveller = [];
  
  for (var otherMembers : OtherMemberGrid.getRows()) {
    addAccompanyingTraveller.add({'firstName': otherMembers.childrenMap.familyMemberCol.value.substringBefore(' '),'lastName': otherMembers.childrenMap.familyMemberCol.value.substringAfter(' '), 'addToOOB': !empty(otherMembers.childrenMap.addToOOBCol.value) ? true : false });
  }
  if(!empty(staffMemeberGrid.getSelectedRows())){
    for ( var selectedMembers : staffMemeberGrid.getSelectedRows()) {
      addAccompanyingTraveller.add( {'firstName': selectedMembers.childrenMap.familyMemberCol.childrenMap.staffMemberName.value.substringBefore(' '), 'lastName': selectedMembers.childrenMap.familyMemberCol.childrenMap.staffMemberName.value.substringAfter(' '), 'addToOOB': false});
    }
  }
  if(!empty(fieldMemeberGrid.getSelectedRows())){
    for ( var i : fieldMemeberGrid.getSelectedRows()) {
      addAccompanyingTraveller.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringBefore(' '), 'lastName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringAfter(' '), 'addToOOB': false});
    }
  }
  
  var TravellerArray = {'data' : addAccompanyingTraveller}
  return TravellerArray;
  }
             %>",
  "presentation": {
    "pageType": "edit",
    "title": {
      "type": "title",
      "id": "title",
      "label": "Create Oob Request"
    },
    "body": {
      "type": "section",
      "id": "bodySection",
      "children": [
        {
          "type": "fieldSet",
          "id": "tripDetailsFS",
          "title": "Trip Details",
          "collapsible": true,
          "children": [
            {
              "type": "checkBox",
              "label": "Have you run a diagnostics check and verified that Vismo is running properly on your device?",
              "id": "vismoChbx",
              "required": true,
              "enabled": true,
              "trueLabel": "True Label",
              "falseLabel": "False Label"
            },
            {
              "type": "text",
              "label": "Trip Name",
              "id": "tripNameTxt",
              "required": true,
              "enabled": true,
              "value": ""
            },
            {
              "type": "textArea",
              "label": "Trip Purpose",
              "id": "tripPurposeTxtA",
              "required": true,
              "enabled": true,
              "value": ""
            },
            {
              "type": "date",
              "label": "Start Date",
              "id": "startDateDt",
              "required": true,
              "enabled": true,
              "value": "<% OOB.getCurrentTime() %>"
            },
            {
              "type": "date",
              "label": "End Date (or Expected End Date)",
              "id": "endDateDt",
              "required": true,
              "enabled": true,
              "value": "<% OOB.getCurrentTime() %>"
            },
            {
              "type": "checkBox",
              "label": "End Date is an Expected End Date",
              "id": "endDateChbx",
              "required": true,
              "enabled": true,
              "trueLabel": "True Label",
              "falseLabel": "False Label",
              "value": true
            },
            {
              "type": "instanceList",
              "label": "STS",
              "id": "stsIL",
              "required": true,
              "enabled": true,
              "values": "<% !empty(OOB.getSTS()) ? OOB.getSTS() : [] %>",
              "searchEndPoint": "<% %>",
              "searchResultValues": "<% [] %>",
              "onChange": "<% self.selectedEntries[0].id == 'other' ? otherStsTxt.setVisible(true) : otherStsTxt.setVisible(false) %>"
            },
            {
              "type": "text",
              "label": "Other - STS specific to this Trip",
              "id": "otherStsTxt",
              "required": false,
              "enabled": true,
              "visible":false,
              "value": ""
            }
          ]
        },
        {
          "type": "fieldSet",
          "title": "Travelers included in OOB",
          "collapsible": true,
          "children": [
            {
              "type": "fieldSet",
              "horizontal": true,

              "children": [
                {
                  "type": "fieldSet",
                  "render": "<% pageVariables.isField %>",
                  "children": [
                    {
                      "type": "grid",
                      "id": "fieldMemeberGrid",
                      "rows": "<% !empty(pageVariables.frequentTravellers) ?  pageVariables.frequentTravellers : [] %>",
                      "render": "<% pageVariables.isField %>",
                      "selectionEnabled": true,
                      "onRowSelect": "<% childrenArrangments() %>",
                      "rowVariableName": "fieldMemeberData",
                      "isArrayOutBinding": true,
                      "label": "<% 'For Field Family Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "familyMemberCol",
                          "label": "<% 'Members of Family Unit or Frequent Travelers from OOB Profile' %>",
                          "cellTemplate": {
                            "type":"fieldSet",
                            "children": [
                              {
                                "id": "worker",
                                "type": "text",
                                "value": "<% !empty(fieldMemeberData.name) ? fieldMemeberData.name : '' %>",
                                "enabled": false,
                                "valuesOut": [
                                  {
                                    "value": "<% (self.value ?: '')  %>"
                                  }
                                ]
                              },
                              {
                                "type": "hidden",
                                "id": "staffId",
                                "value": "<% !empty(fieldMemeberData.id) ? fieldMemeberData.id : '' %>"
                              },
                              {
                                "type": "hidden",
                                "id": "relationship",
                                "value": "<% !empty(fieldMemeberData.id) ? fieldMemeberData.relationship : '' %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "fieldSet",
                  "render": "<% !pageVariables.isField %>",
                  "children":[
                    {
                      "type": "grid",
                      "id": "staffMemeberGrid",
                      "rows": "<% getFrequentTravellers.data.add({'id': getCurrentWorker.id,'name': getCurrentWorker.descriptor}) %>",
                      "rowVariableName": "staffMemeberData",
                      "render": "<% !pageVariables.isField %>",
                      "selectionEnabled": true,
                      "label": "<% 'For Staff Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "familyMemberCol",
                          "label": "<% 'Travelers (yourself plus Frequent Travelers from OOB Profile)' %>",
                          "cellTemplate": {
                            "type": "fieldSet",
                            "children": [
                              {
                                "type": "text",
                                "id": "staffMemberName",
                                "value": "<% staffMemeberData.name %>",
                                "enabled": false
                              },
                              {
                                "type": "hidden",
                                "id": "StaffId",
                                "value": "<% staffMemeberData.id %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "richText",
              "label": "Alternative arrangements for Dependent Children ",
              "id": "AlternativeRTxt",
              "required": false,
              "visible": "<% pageVariables.isField %>",
              "enabled": false
            },
            {
              "type": "textArea",
              "id": "alternativeTxtA",
              "label": "Please describe the arrangements for your dependent children who are not traveling with you.   Please include addresses, caregiver contact information, etc.",
              "required": "<% pageVariables.isField %>",
              "enabled": true,
              "visible": "<% pageVariables.isField %>",
              "value": ""
            },
            {
              "type": "checkBox",
              "label": "Other individuals (not list above) that will be traveling",
              "id": "otherIndividualsChbx",
              "required": false,
              "enabled": true,
              "onChange":"<% self.value ? OtherMemberGrid.setVisible(true) : OtherMemberGrid.setVisible(false) %>"
            },
            {
              "type": "grid",
              "rows": "<% [] %>",
              "id": "OtherMemberGrid",
              "rowVariableName": "otherMemeberData",
              "label": "<% 'For Other Members' %>",
              "visible": false,
              "columns": [
                {
                  "type": "column",
                  "columnId": "familyMemberCol",
                  "label": "<% 'Other Individuals Traveling ' %>",
                  "cellTemplate": {
                    "type": "text",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "addToOOBCol",
                  "label": "<% 'Add to OOB profile? ' %>",
                  "cellTemplate": {
                    "type": "checkBox",
                    "value": "<% false %>",
                    "enabled": true
                  }
                }
              ]
            },
            {
              "type": "grid",
              "rows": "<% [] %>",
              "id": "allNumbers",
              "rowVariableName": "contactDetailsData",
              "label": "<% 'Phone Numbers you are travelling with' %>",
              "columns": [
                {
                  "type": "column",
                  "columnId": "NameCol",
                  "label": "<% 'Name' %>",
                  "cellTemplate": {
                    "type": "fieldSet",
                    "children": [
                      {
                        "type": "instanceList",
                        "id": "nameCell",
                        "displayKey": "name",
                        "required": true,
                        "values": "<% pageVariables.phoneNumbers ?: [] %>",
                        "onChange": "<%
                          if(!empty(self.selectedEntries[0]) && self.selectedEntries[0].id != 'other'){
                              console.info('entered update phone');
                            var selectedNumberData= getMobileNumbers.data.find( x=> {x.id == self.selectedEntries[0].id});
                            numberId.value = selectedNumberData.id;
                            numberName.value = selectedNumberData.name;
                            phoneNameCell.value = selectedNumberData.name;      
                                //TODO
                                phoneCodeList.setValue([selectedNumberData.countryCode ?: '']);

                                //phoneCodeList.setValues([{'id': '1'/*selectedNumberData.countryCode.toString()*/, 'descriptor': 'test' /*selectedNumberData.countryCode.toString()*/}]);
                            phoneNumberCol.value = regex:replace(selectedNumberData.number, '[^0-9.]', '');
                            notesCol.value = selectedNumberData.notes;
                            phoneNameCell.enabled=false;
                          }
                          else if(!empty(self.selectedEntries[0]) && self.selectedEntries[0].id == 'other'){
                              console.info('entered other');
                            numberId.value = 'other';
                            phoneNameCell.value = '';
                            phoneCodeList.setValue([]);
                            phoneNumberCol.value = '';
                            phoneNameCell.enabled=true;
                            notesCol.value = '';
                          }    
                          else{
                              console.info('entered else phone');
                            numberId.value = '';
                            numberName.value = '';
                                //TODO
                            phoneCodeList.setValue([]);
                            phoneNumberCol.value = '';
                            notesCol.value = '';
                            phoneNameCell.value = '';
                            phoneNameCell.enabled=false;
                          }
                        %>"
                  },
                      {
                        "type": "hidden",
                        "id": "numberName",
                        "value": ""
                      },
                      {
                        "type": "hidden",
                        "id": "numberId",
                        "value": ""
                      }
                      ]
                    }
                },
                {
                  "type": "column",
                  "columnId": "phoneNameCol",
                  "label": "<% 'Name' %>",
                  "cellTemplate": {
                    "type": "text",
                    "id": "phoneNameCell",
                    "enabled": false,
                    "value": ""
                  }
                },
                {
                  "type": "column",
                  "columnId": "countryCodeCol",
                  "label": "<% 'Country Phone Code' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "id": "phoneCodeList",
                    "values": "<% [] %>",
                    "searchEndPoint": "<% endpoints.getPhoneCodes %>",
                    "searchResultValues": "<% getPhoneCodes.items.distinct() %>",
                    "idKey": "phoneCode",
                    "displayKey": "phoneCode",
                    "multiSelect": false
                  }
                },
                {
                  "type": "column",
                  "columnId": "phoneNumberCol",
                  "label": "<% 'Phone Number' %>",
                  "cellTemplate": {
                    "type": "text",
                    "id": "phoneNumberCol",
                    "value": "",
                    "required": true,
                    "onChange": "<%
                      self.clearError();
                      if(!empty(self.value) && !regex:match(self.value, '[0-9]+')) {
                        self.setError('Only numbers allowed');
                      }
                    %>"
                  }
                },
                {
                  "type": "column",
                  "columnId": "notesCol",
                  "label": "<% 'Notes' %>",
                  "cellTemplate": {
                    "type": "text",
                    "id": "notesCol",
                    "value": ""
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "fieldSet",
          "render": "<% empty(getWorkerDetails.data[0].workerIsContingentWorker) %>",
          "title": "Personal Time",
          "collapsible": true,
          "children": [
            {
              "type": "richText",
              "id": "personalTimeRTxt",
              "required": false,
              "enabled": false,
              "value": "Please specify the date(s) and time off type for your personal time.  Upon submission of this OOB the time off requests will be created for you."
            },
            {
              "type": "radioGroup",
              "label": "Trip includes Vacation, Bereavement or Holiday days",
              "id": "PersonalLeaveRG",
              "required": true,
              "instanceList": [
                {
                  "id": "yes",
                  "descriptor": "Yes"
                },
                {
                  "id": "no",
                  "descriptor": "No"
                }
              ],
              "selectedValues":"<% ['no'] %>",
              "onChange": "<% self.value == ['yes'] ? personalTimeGrid.setVisible(true) : personalTimeGrid.setVisible(false)%>"
            },
            {
              "type": "grid",
              "id": "personalTimeGrid",
              "rows": "<% [] %>",
              "visible": false,
              "isArrayOutBinding": "true",
              "rowVariableName": "timeOffData",
              "label": "<% 'Personal Time Off Details' %>",
              "columns": [
                {
                  "type": "column",
                  "columnId": "workerTimeOffCol",
                  "label": "<% 'Workers taking time off' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "values": "<%  !pageVariables.isField ? getWorkerDetails.data.map(x => {x.worker}) : !empty(getWorkerFromSameUnit.data) ? getWorkerFromSameUnit.data.map(result => {result.worker}) : [] %>",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "absenceTypeCol",
                  "label": "<% 'Absence Type' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "id": "absenceTypeIL",
                    "values": "<% !empty(getTimeOffTypes.data) ? getTimeOffTypes.data.map(result => {result.timeOffType}) : [] %>"
                   }
                },
                {
                  "type": "column",
                  "columnId": "startDateCol",
                  "label": "<% 'Start Date' %>",
                  "cellTemplate": {
                    "type": "date",
                    "value": "<% '' %>",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "endDateCol",
                  "label": "<% 'End Date' %>",
                  "cellTemplate": {
                    "type": "date",
                    "value": "<% '' %>",
                    "enabled": true
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "fieldSet",
          "title": "Elevated Risk",
          "collapsible": true,
          "children": [
            {
              "type": "radioGroup",
              "label": "Is this an Elevated Risk Situation",
              "id": "elevatedRiskRG",
              "required": true,
              "selectedValues": "<% ['no']  %>",
              "instanceList": [
                {
                  "id": "yes",
                  "descriptor": "Yes"
                },
                {
                  "id": "no",
                  "descriptor": "No"
                }
              ],
              "onChange": "<% self.value == ['yes'] ? elevatedRiskTxtA.setVisible(true) : elevatedRiskTxtA.setVisible(false)%>"
            },
            {
              "type": "textArea",
              "label": "As this is an Elevated Risk Situation, state who you will make scheduled contact with upon departure, arrival and return; what the contact frequency will be and what form the contact will take – cell phone, radio frequency, VOIP Phone, etc.)",
              "id": "elevatedRiskTxtA",
              "required": false,
              "enabled": true,
              "value": "",
              "visible": false
            },
            {
              "type": "textArea",
              "label": "Comments can be entered here for this OOB.  NOTE that these are not private comments and are visible to others who have access to view this OOB.",
              "id": "addCommentsOnBehalfOfTxtA",
              "render": "<% !pageVariables.isField%>",
              "required": false,
              "enabled": true,
              "visible": true,
              "value": ""
            }
          ]
        },
        {
          "type": "editButtonBar",
          "editButtons": [
            {
              "type": "editButton",
              "label": "<% 'Next' %>",
              "buttonType": "PRIMARY",
              "sortOrder": "a",
              "id": "nextBtn"
            },
            {
              "type": "editButton",
              "label": "<% 'Save For Later' %>",
              "id": "saveForLaterBtn",
              "sortOrder": "b",
              "buttonType": "AUXILIARY"
            }
          ]
        }
      ]
    }
  }
}