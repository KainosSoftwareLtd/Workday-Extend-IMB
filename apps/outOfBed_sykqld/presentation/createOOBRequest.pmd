{
  "id": "createOOBRequest",
  "_generationNote": "This page creates a single instance of the OOBRequest object. You can use this page as a starting template for building an end-user page, or used as an administration page to create new instances.",
  "endPoints": [
    {
      "name": "getCurrentWorker",
      "baseUrlType": "WORKDAY-COMMON",
      "url": "/workers/me",
      "authType": "sso"
    },
    {
      "name": "getAccompanyingTravellers",
      "httpMethod": "GET",
      "authType": "sso",
      "_generationNote": "Gets a collection of AccompanyingTravellers business objects. By default, this endpoint returns 20 instances. To increase the page size, use the 'limit' query parameter (e.g. ?limit=100).",
      "_generationNote2": "If there are more than 100 instances, consider using a search endpoint or another way for the user to filter the available selections.",
      "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers` %>",
      "exclude": true
    },
    {
      "name": "getMobileNumbers",
      "httpMethod": "GET",
      "authType": "sso",
      "_generationNote": "Gets a collection of MobileNumbers business objects. By default, this endpoint returns 20 instances. To increase the page size, use the 'limit' query parameter (e.g. ?limit=100).",
      "_generationNote2": "If there are more than 100 instances, consider using a search endpoint or another way for the user to filter the available selections.",
      "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers` %>"
    },
    {
      "name": "getWorkers",
      "httpMethod": "GET",
      "authType": "sso",
      "_generationNote": "For data types with a large quantity of instances, it may be required to apply filtering.",
      "_generationNote2": "If there are more than 100 instances, consider using a search endpoint or another way for the user to filter the available selections.",
      "url": "https://api.workday.com/common/v1/workers",
      "exclude": true
    },
    {
      "name": "getDestinations",
      "httpMethod": "GET",
      "authType": "sso",
      "_generationNote": "Gets a collection of Destination business objects. By default, this endpoint returns 20 instances. To increase the page size, use the 'limit' query parameter (e.g. ?limit=100).",
      "_generationNote2": "If there are more than 100 instances, consider using a search endpoint or another way for the user to filter the available selections.",
      "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/destinations` %>",
      "exclude": true
    },
    {
      "name": "getFrequentTravellers",
      "baseUrlType": "APP-V1",
      "url": "/frequentTravellers",
      "authType": "sso"
    },
    {
      "name": "getOOBProfile",
      "baseUrlType": "APP-V1",
      "url": "/oobProfiles",
      "authType": "sso"
    },
    {
      "name": "getFrequentTravellersWQL",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<%'/data?query=' + ('SELECT workdayID, frequentTravellers FROM outOfBed_sykqld_oobProfiles WHERE frequentTravellers is not empty').urlEncode() %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerDetails",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + OOB.getWorkerDetails('phoneNumbers, workerIsContingentWorker', empty(onBehalf) ?  'worker in (' + getCurrentWorker.id +')' : '') %>",
      "authType": "sso"
    },
    {
      "name": "getWorkerFromSameUnit",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT worker, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship} as dependent FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + 12345 + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getWorkerAndDependents",
      "baseUrlType": "WORKDAY-WQL",
      "url": "<% '/data?query=' + ('SELECT worker, cf_CFLRVUnitIDTextWorker as UnitID, fullName, phone_PrimaryHome, phone_PrimaryWork, phoneNumbers, dependents{name, phoneNumber_PrimaryWithCountryCode, relationship} as dependents FROM workersForHCMReporting (dataSourceFilter = allActiveWorkers) WHERE cf_CFLRVUnitIDTextWorker =\"' + 12345 + '\"').urlEncode() %>",
      "authType": "wcpisu"
    },
    {
      "name": "getPhoneCodes",
      "httpMethod": "GET",
      "authType": "sso",
      "deferred": true,
      "url": "<% 'https://api.workday.com/referenceData/country_phone_code/vers/latest/search?q=' + instanceListQuery %>"
    }
  ],
  "outboundData": {
    "outboundEndPoints": [
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "createAccompanyingTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/accompanyingTravellers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
        //console.info('addAccompanyingTraveller = start');
        self.data = {'data':[]};
        var addAccompanyingTraveller= [];
        for (var otherMembers : OtherMemberGrid.getRows()) {
          if(otherMembers.childrenMap.addToOOBCol.value){
            addAccompanyingTraveller.add({'firstName': otherMembers.childrenMap.familyMemberCol.value.substringBefore(' '),'lastName': otherMembers.childrenMap.familyMemberCol.value.substringAfter(' ')});
          }
        }

        if(!empty(fieldMemeberGrid.getSelectedRows())){
          for ( var i : fieldMemeberGrid.getSelectedRows()) {
            addAccompanyingTraveller.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringBefore(' '), 'lastName': i.childrenMap.familyMemberCol.childrenMap.worker.value.substringAfter(' ')});
          }
        }

        //console.info('addAccompanyingTraveller List =' + addAccompanyingTraveller);
        self.data.data.add(addAccompanyingTraveller);
        console.info('createAccompanyingTravellers self.data =' + json:asJSON(self.data));

        self.data;
        %>",
        "failOnStatusCodes": [{"code":400},{"code":403}]
      },
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "createFrequentTravellers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/frequentTravellers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
          self.data = {'data':[]};
          var addOtherMembers= [];
          for (var otherMembers : OtherMemberGrid.getRows()) {
              //console.info('columnData =' + otherMembers.childrenMap.addToOOBCol.value);
            if(otherMembers.childrenMap.addToOOBCol.value){
            //addOtherMembers.add({'name': otherMembers.childrenMap.familyMemberCol.value});
            self.data.data.add({'name': otherMembers.childrenMap.familyMemberCol.value});
            }
          }
          //console.info('INFO =' + addOtherMembers);
          //console.info('createFrequentTravellers self.data =' + json:asJSON(self.data));
          //self.data.data.addAll(addOtherMembers);
          self.data;
          %>",
        "failOnStatusCodes": [{"code":400},{"code":403}]
      },
      {
        "name": "createMobileNumbers",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/mobileNumbers?bulk=true` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "failOnStatusCodes": [{"code":400},{"code":403}]
      },
      {
        "_generationNote": "Creates a single instance, as specified by of the OOBRequest business object resource.",
        "name": "createOOBRequest",
        "url": "<% `https://api.workday.com/apps/outOfBed_sykqld/v1/oobRequests` %>",
        "authType": "sso",
        "httpMethod": "POST",
        "onSend": "<%
          console.debug('createOOBRequest self.data = ' + json:asJSON(self.data));
          return self.data;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "expectedEndDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? Dates.getDateFormatted(endDateDt.value) : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "exclude": true,
            "value": "<%
              var travellers = []
              console.debug('Request Travllers start' );
              if(!empty(fieldMemeberGrid.getSelectedRows())){
                  console.debug('Select Rows Empty' + !empty(fieldMemeberGrid.getSelectedRows()));
                      for ( var i : fieldMemeberGrid.getSelectedRows()) {
                          console.debug('worker Name = ' + !empty(i.childrenMap.familyMemberCol.childrenMap.worker.value) ? i.childrenMap.familyMemberCol.childrenMap.worker.value : '' );
                          travellers.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value});
                      }
              }
              console.debug('selected Travllers' + travellers);
              return travellers;
              %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "value": "<% createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}}) %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "exclude": "<% empty(createMobileNumbers) %>",
            "value": "<% 
            var mobileList =[];
            mobileList = createMobileNumbers.data.map(x=> {{'id' : x.body.id}});
            console.info('MobileNumber =' + json:asJSON(mobileList));
            return mobileList;
            %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% true %>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller.id",
            "_exclude": true,
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "lodging.id",
            "exclude": true,
            "value": "<% '5673ac5b801f9001a44ba2d06f180000' %>"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "<% 'true' %>"
          },
          {
            "outboundPath": "status",
            "exclude": true,
            "value": "<% 'singleInstance' %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          }
        ]
      },
      {
        "_generationNote": "Updates a single instance, as specified by of the OOBProfile business object resource.",
        "name": "updateOOBProfile",
        "url": "<% 'https://api.workday.com/apps/outOfBed_sykqld/v1/oobProfiles/' + '5673ac5b801f9001a44bb09bcdc90000' %>",
        "authType": "sso",
        "httpMethod": "PATCH",
        "exclude": false,
        "_onSend": "<%
         //var updateOOBProfileList = createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}});;
         //var updateOOBProfileMap = {:};

         //console.debug('createAccompanyingTravellers .data = ' + json:asJSON(createAccompanyingTravellers.data));
         //var dataMap = createAccompanyingTravellers.data.map(x=> {{'id' : x.body.id}});

         //updateOOBProfileMap.add('data', updateOOBProfileList);
         //console.debug('updateOOBProfileList = ' + json:asJSON(updateOOBProfileList));
         console.debug('Update OOBProfile .data = ' + json:asJSON(self.data));
         //return updateOOBProfileMap;
        %>",
        "failOnStatusCodes": [
          {
            "code": 400
          },
          {
            "code": 403
          }
        ],
        "values": [
          {
            "outboundPath": "sts",
            "exclude": true,
            "value": "<% !empty(sts.value) ? sts.value : '' %>"
          },
          {
            "exclude": true,
            "outboundPath": "mobileNumbers",
            "value": "<% !empty(mobileNumbers) ? mobileNumbers : '' %>"
          },
          {
            "outboundPath": "frequentTravellers",
            "value": "<% //createFrequentTravellers.data.map(x=> {{'id' : x.body.id}})
             var list = createFrequentTravellers.data.map(x=> {{'id' : x.body.id}});
            console.info('This is info = ' + json:asJSON(list));
            return list;
                      %>"
          },
          {
            "exclude": true,
            "outboundPath": "favouriteDestinations",
            "value": "<% !empty(favouriteDestinations.value) ? favouriteDestinations : null %>"
          }
        ]
      },
      {
        "name": "transitionOutboundVars",
        "type": "outboundVariable",
        "variableScope": "flow",
        "values": [
          {
            "outboundPath": "saveForLater",
            "value": "<% !empty(saveForLaterBtn.value) %>"
          },
          {
            "outboundPath": "proceed",
            "value": "<% !empty(nextBtn.value) %>"
          },
          {
            "outboundPath": "name",
            "value": "<% !empty(tripNameTxt.value) ? tripNameTxt.value : '' %>"
          },
          {
            "outboundPath": "purpose",
            "value": "<% !empty(tripPurposeTxtA.value) ? tripPurposeTxtA.value : '' %>"
          },
          {
            "outboundPath": "startDate",
            "value": "<% !empty(startDateDt.value) ?  Dates.getDateFormatted(startDateDt.value) : null %>"
          },
          {
            "outboundPath": "endDate",
            "value": "<% !empty(endDateDt.value) ? endDateDt.value : null %>"
          },
          {
            "outboundPath": "sts",
            "value": "<% !empty(stsIL.selectedEntries[0]) ? stsIL.selectedEntries[0].descriptor : '' %>"
          },
          {
            "outboundPath": "otherSTS",
            "value": "<% !empty(otherStsTxt.value) ? otherStsTxt.value : '' %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "exclude": true,
            "value": "<%
              var travellers = []
              if(!empty(fieldMemeberGrid.getSelectedRows())){
                for ( var i : fieldMemeberGrid.getSelectedRows()) {
                  travellers.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value});
                }
              }
              return travellers;
            %>"
          },
          {
            "outboundPath": "accompanyingTravellers",
            "exclude": true,
            "value": "<%
                      var travellers = []
                      if(!empty(fieldMemeberGrid.getSelectedRows())){
                          for ( var i : fieldMemeberGrid.getSelectedRows()) {
                              travellers.add( {'firstName': i.childrenMap.familyMemberCol.childrenMap.worker.value});
                          }
                      }
                      return travellers;
                      %>"
          },
          {
            "outboundPath": "alternateArrangementForChildren",
            "value": "<% !empty(alternativeTxtA.value) ? alternativeTxtA.value : '' %>"
          },
          {
            "outboundPath": "phoneNumbers",
            "value": "<% 'Multiinstance' %>"
          },
          {
            "outboundPath": "elevatedRisk",
            "value": "<% (elevatedRiskRG.value == ['yes'])%>"
          },
          {
            "outboundPath": "elevatedRiskSituation",
            "value": "<% !empty(elevatedRiskTxtA) ? elevatedRiskTxtA.value : '' %>"
          },
          {
            "outboundPath": "initiatorComments",
            "value": "<% !empty(addCommentsOnBehalfOfTxtA) ? addCommentsOnBehalfOfTxtA.value : '' %>"
          },
          {
            "outboundPath": "traveller",
            "value": "<% 'singleInstance' %>"
          },
          {
            "outboundPath": "lodging.id",
            "exclude": true,
            "value": "<% '5673ac5b801f9001a44ba2d06f180000' %>"
          },
          {
            "outboundPath": "cancelConfirmation",
            "value": "<% %>"
          },
          {
            "outboundPath": "status",
            "exclude": true,
            "value": "<% 'singleInstance' %>"
          },
          {
            "outboundPath": "initiator",
            "exclude": true,
            "value": "<% !empty(getCurrentWorker) ? getCurrentWorker.id : '' %>"
          },
          {
            "outboundPath": "affinity",
            "value": "<% '' %>"
          }
        ]
      }
    ],
    "responseErrorDetail": {
      "_generationNote": "This responseErrorDetail works with the Workday API error structure.",
      "_generationNote2": "If there is only a single error, the errorSummary will be shown.",
      "errorSummary": "<% error %>",
      "_generationNote3": "For multiple errors, append the top-level error to provide context.",
      "errors": "<% empty errors ? [] : [error].join(errors.map(err => { err.error } )) %>"
    }
  },
  "include": [
    "OOB.script",
    "Dates.script"
  ],
  "onLoad": "<%
    var workers1 =[];
    var counter = 0;
    for (var item : getWorkerFromSameUnit.data){
      workers1.add({'id': item.worker.id, 'name': item.worker.descriptor})
      if(!empty(item)){
        var i = 0
        for( var child : item.dependent){
          workers1.add({'id': child.name, 'name': child.name, 'relationshiop': child.relationship.descriptor});
          i = i+1;
        }
        i=0;
      }
    }

    var phoneNumbersPV = getMobileNumbers.data;
    for (var numberVar : getWorkerDetails.data[0].phoneNumbers){
      phoneNumbersPV.add({'id' : numberVar.id, 'number': numberVar.descriptor,  'name': numberVar.descriptor});
    };

    pageVariables.frequentTravellers = workers1.addAll(getFrequentTravellers.data);
    pageVariables.phoneNumbers = phoneNumbersPV.add({'id': 'other', 'number': 'Other', 'name': 'Other'}) ;
  %>",
  "onSubmit": "<%

  %>",
  "securityDomains": [ ],
  "script": "",
  "presentation": {
    "pageType": "edit",
    "title": {
      "type": "title",
      "id": "title",
      "label": "Create Oob Request"
    },
    "body": {
      "type": "section",
      "id": "bodySection",
      "children": [
        {
          "type": "text",
          "label": " getMobileNumbers.data",
          "id": "testTxt",
          "visible": true,
          "required": false,
          "enabled": false,
          "value": "<% !empty(getMobileNumbers.data) ?  getMobileNumbers.data : 'Empty' %>"
        },
        {
          "type": "text",
          "label": "pageVariables.phoneNumbers",
          "id": "testTxt2",
          "visible": true,
          "required": false,
          "enabled": false,
          "value": "<% !empty(pageVariables.phoneNumbers) ? json:asJSON(pageVariables.phoneNumbers) : 'Empty' %>"
        },
        {
          "type": "fieldSet",
          "id": "tripDetailsFS",
          "title": "Trip Details",
          "collapsible": true,
          "children": [
            {
              "type": "checkBox",
              "label": "Have you run a diagnostics check and verified that Vismo is running properly on your device?",
              "id": "vismoChbx",
              "required": true,
              "enabled": true,
              "trueLabel": "True Label",
              "falseLabel": "False Label",
              "value": true
            },
            {
              "type": "text",
              "label": "Trip Name",
              "id": "tripNameTxt",
              "required": true,
              "enabled": true,
              "value": "Test Trip 1"
            },
            {
              "type": "textArea",
              "label": "Trip Purpose",
              "id": "tripPurposeTxtA",
              "required": true,
              "enabled": true,
              "value": "Test Purpose"
            },
            {
              "type": "date",
              "label": "Start Date",
              "id": "startDateDt",
              "required": true,
              "enabled": true,
              "value": "<% OOB.getCurrentTime() %>"
            },
            {
              "type": "date",
              "label": "End Date (or Expected End Date)",
              "id": "endDateDt",
              "required": true,
              "enabled": true,
              "value": "<% OOB.getCurrentTime() %>"
            },
            {
              "type": "checkBox",
              "label": "End Date is an Expected End Date",
              "id": "endDateChbx",
              "required": true,
              "enabled": true,
              "trueLabel": "True Label",
              "falseLabel": "False Label",
              "value": true
            },
            {
              "type": "instanceList",
              "label": "STS",
              "id": "stsIL",
              "required": true,
              "enabled": true,
              "values": "<% !empty(OOB.getSTS()) ? OOB.getSTS() : [] %>",
              "searchEndPoint": "<% %>",
              "searchResultValues": "<% [] %>",
              "onChange": "<% self.selectedEntries[0].id == 'other' ? otherStsTxt.setVisible(true) : otherStsTxt.setVisible(false) %>"
            },
            {
              "type": "text",
              "label": "Other - STS specific to this Trip",
              "id": "otherStsTxt",
              "required": false,
              "enabled": true,
              "visible":false,
              "value": ""
            }
          ]
        },
        {
          "type": "fieldSet",
          "title": "Travelers included in OOB",
          "collapsible": true,
          "children": [
            {
              "type": "fieldSet",
              "horizontal": true,
              "children": [
                {
                  "type": "fieldSet",
                  "children": [
                    {
                      "type": "grid",
                      "id": "fieldMemeberGrid",
                      "rows": "<% pageVariables.frequentTravellers %>",
                      "selectionEnabled": true,
                      "rowVariableName": "fieldMemeberData",
                      "isArrayOutBinding": true,
                      "label": "<% 'For Field Family Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "familyMemberCol",
                          "label": "<% 'Members of Family Unit or Frequent Travelers from OOB Profile' %>",
                          "cellTemplate": {
                            "type":"fieldSet",
                            "children": [
                              {
                                "id": "worker",
                                "type": "text",
                                "value": "<% fieldMemeberData.name %>",
                                "enabled": false,
                                "valuesOut": [
                                  {
                                    "_valueOutBinding": "createFrequentTravellers.data[].name",
                                    "value": "<% (self.value ?: '')  %>"
                                  }
                                ]
                              },
                              {
                                "type": "hidden",
                                "id": "staffId",
                                "value": "<% !empty(fieldMemeberData.id) ? fieldMemeberData.id : '' %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "fieldSet",
                  "children":[
                    {
                      "type": "grid",
                      "rows": "<% getFrequentTravellers.data.add({'id': getCurrentWorker.id,'name': getCurrentWorker.descriptor}) %>",
                      "rowVariableName": "staffMemeberData",
                      "selectionEnabled": true,
                      "label": "<% 'For Staff Members' %>",
                      "columns": [
                        {
                          "type": "column",
                          "columnId": "familyMemberCol",
                          "label": "<% 'Travelers (yourself plus Frequent Travelers from OOB Profile)' %>",
                          "cellTemplate": {
                            "type": "fieldSet",
                            "children": [
                              {
                                "type": "text",
                                "id": "staffMemberName",
                                "value": "<% staffMemeberData.name %>",
                                "enabled": false
                              },
                              {
                                "type": "hidden",
                                "id": "StaffId",
                                "value": "<% staffMemeberData.id %>"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "checkBox",
              "label": "Other individuals (not list above) that will be traveling",
              "id": "otherIndividualsChbx",
              "required": false,
              "enabled": true,
              "onChange":"<% self.value ? OtherMemberGrid.setVisible(true) : OtherMemberGrid.setVisible(false) %>"
            },
            {
              "type": "grid",
              "rows": "<% [] %>",
              "id": "OtherMemberGrid",
              "rowVariableName": "otherMemeberData",
              "label": "<% 'For Other Members' %>",
              "visible": false,
              "columns": [
                {
                  "type": "column",
                  "columnId": "familyMemberCol",
                  "label": "<% 'Other Individuals Traveling ' %>",
                  "cellTemplate": {
                    "type": "text",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "addToOOBCol",
                  "label": "<% 'Add to OOB profile? ' %>",
                  "cellTemplate": {
                    "type": "checkBox",
                    "value": "<% false %>",
                    "enabled": true
                  }
                }
              ]
            },
            {
              "type": "richText",
              "label": "Alternative arrangements for Dependent Children ",
              "id": "AlternativeRTxt",
              "required": false,
              "enabled": false
            },
            {
              "type": "textArea",
              "id": "alternativeTxtA",
              "label": "Please describe the arrangements for your dependent children who are not traveling with you.   Please include addresses, caregiver contact information, etc.",
              "required": true,
              "enabled": true,
              "value": "alternative Text area"
            },
            {
              "type": "grid",
              "rows": "<% [] %>",
              "id": "allNumbers",
              "isArrayOutBinding": true,
              "rowVariableName": "contactDetailsData",
              "label": "<% 'Phone Numbers you are travelling with' %>",
              "columns": [
                {
                  "type": "column",
                  "columnId": "NameCol",
                  "label": "<% 'Name' %>",
                  "cellTemplate": {
                    "type": "fieldSet",
                    "children": [
                      {
                        "type": "instanceList",
                        "id": "nameCell",
                        "displayKey": "number",
                        "values": "<% pageVariables.phoneNumbers %>",

                        "onChange": "<%
                          if(!empty(self.selectedEntries[0]) && self.selectedEntries[0].id != 'other'){
                            var selectedNumberData= getMobileNumbers.data.find( x=> {x.id == self.selectedEntries[0].id});
                            console.info('selectedNumberData = ' + selectedNumberData);
                            notesCol.value = selectedNumberData.notes;
                            numberName.value = selectedNumberData.name;
                                //TODO
                            //phoneCodeList.setValues([{'id': '1'/*selectedNumberData.countryCode.toString()*/, 'descriptor': 'test' /*selectedNumberData.countryCode.toString()*/}]);
                            phoneNumberCol.value = regex:replace(selectedNumberData.number, '[^0-9.]', '');
                          }
                          else{
                            notesCol.value = '';
                                //TODO
                            //phoneCodeList.setValues = '';
                            phoneNumberCol.value = '';
                          }
                        %>"
                  },
                      {
                        "type": "text",
                        "id": "numberName",
                        "valueOutBinding": "createMobileNumbers.data[].name",
                        "value": "<% !empty(nameCell.selectedEnteries[0].name) ? nameCell.selectedEnteries[0].name : '' %>"
                      }
                      ]
                    }
                },
                {
                  "type": "column",
                  "columnId": "countryCodeCol",
                  "label": "<% 'Country Phone Code' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "id": "phoneCodeList",
                    "values": "<% [] %>",
                    "searchEndPoint": "<% endpoints.getPhoneCodes %>",
                    "searchResultValues": "<% getPhoneCodes.items.distinct() %>",
                    "idKey": "phoneCode",
                    "displayKey": "phoneCode",
                    "multiSelect": false,
                    "valueOutBinding": "createMobileNumbers.data[].countryCode"
                  }
                },
                {
                  "type": "column",
                  "columnId": "phoneNumberCol",
                  "label": "<% 'Phone Number' %>",
                  "cellTemplate": {
                    "type": "text",
                    "id": "phoneNumberCol",
                    "value": "",
                    "valueOutBinding": "createMobileNumbers.data[].number",
                    "onChange": "<%
                      self.clearError();
                      if(!empty(self.value) && !regex:match(self.value, '[0-9]+')) {
                        self.setError('Only numbers allowed');
                      }
                    %>"
                  }
                },
                {
                  "type": "column",
                  "columnId": "notesCol",
                  "label": "<% 'Notes' %>",
                  "cellTemplate": {
                    "type": "text",
                    "id": "notesCol",
                    "value": "",
                    "valueOutBinding": "createMobileNumbers.data[].notes"
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "fieldSet",
          "render": "<% !getWorkerDetails.data[0].workerIsContingentWorker %>",
          "title": "Personal Time",
          "collapsible": true,
          "children": [
            {
              "type": "richText",
              "id": "personalTimeRTxt",
              "required": false,
              "enabled": false,
              "value": "Please specify the date(s) and time off type for your personal time.  Upon submission of this OOB the time off requests will be created for you."
            },
            {
              "type": "radioGroup",
              "label": "Trip includes Vacation, Bereavement or Holiday days",
              "required": true,
              "instanceList": [
                {
                  "id": "yes",
                  "descriptor": "Yes"
                },
                {
                  "id": "no",
                  "descriptor": "No"
                }
              ],
              "selectedValues":"<% ['yes'] %>"
            },
            {
              "type": "grid",
              "rows": "<% [] %>",
              "rowVariableName": "timeOffData",
              "label": "<% 'Personal Time Off Details' %>",
              "columns": [
                {
                  "type": "column",
                  "columnId": "workerTimeOffCol",
                  "label": "<% 'Workers taking time off' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "values": "<% [] %>",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "countryCodeCol",
                  "label": "<% 'Absence Type' %>",
                  "cellTemplate": {
                    "type": "instanceList",
                    "id": "absenceTypeIL",
                    "values": "<% [] %>"
                  }
                },
                {
                  "type": "column",
                  "columnId": "Start DateCol",
                  "label": "<% 'Start Date' %>",
                  "cellTemplate": {
                    "type": "date",
                    "value": "<% '' %>",
                    "enabled": true
                  }
                },
                {
                  "type": "column",
                  "columnId": "endDateCol",
                  "label": "<% 'End Date' %>",
                  "cellTemplate": {
                    "type": "date",
                    "value": "<% '' %>",
                    "enabled": true
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "fieldSet",
          "title": "Elevated Risk",
          "collapsible": true,
          "children": [
            {
              "type": "radioGroup",
              "label": "Is this an Elevated Risk Situation",
              "id": "elevatedRiskRG",
              "required": true,
              "selectedValues": "<% ['no']  %>",
              "instanceList": [
                {
                  "id": "yes",
                  "descriptor": "Yes"
                },
                {
                  "id": "no",
                  "descriptor": "No"
                }
              ],
              "onChange": "<% self.value == ['yes'] ? elevatedRiskTxtA.setVisible(true) : elevatedRiskTxtA.setVisible(false)%>"
            },
            {
              "type": "textArea",
              "label": "As this is an Elevated Risk Situation, state who you will make scheduled contact with upon departure, arrival and return; what the contact frequency will be and what form the contact will take – cell phone, radio frequency, VOIP Phone, etc.)",
              "id": "elevatedRiskTxtA",
              "required": false,
              "enabled": true,
              "value": "Value",
              "visible": false
            },
            {
              "type": "textArea",
              "label": "Comments can be entered here for this OOB.  NOTE that these are not private comments and are visible to others who have access to view this OOB.",
              "id": "addCommentsOnBehalfOfTxtA",
              "render": "<% !empty(onBehalfOf) %>",
              "required": false,
              "enabled": true,
              "visible": false,
              "value": ""
            }
          ]
        },
        {
          "type": "editButtonBar",
          "editButtons": [
            {
              "type": "editButton",
              "label": "<% 'Next' %>",
              "buttonType": "PRIMARY",
              "sortOrder": "a",
              "id": "nextBtn"
            },
            {
              "type": "editButton",
              "label": "<% 'Save For Later' %>",
              "id": "saveForLaterBtn",
              "sortOrder": "b",
              "buttonType": "AUXILIARY"
            }
          ]
        }
      ]
    }
  }
}